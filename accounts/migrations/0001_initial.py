# Generated by Django 4.2.5 on 2023-09-17 14:19

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_serverowner', models.BooleanField(default=False)),
                ('is_subscriber', models.BooleanField(default=False)),
                ('is_affiliate', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Affiliate',
            fields=[
                ('affiliate_link', models.CharField(blank=True, help_text='The unique affiliate link.', max_length=255, null=True, unique=True, verbose_name='affiliate link')),
                ('discord_id', models.CharField(help_text='Discord ID of the affiliate.', max_length=255, primary_key=True, serialize=False, verbose_name='discord id')),
                ('server_id', models.CharField(help_text='The ID of the server associated with the affiliate.', max_length=255, verbose_name='server id')),
                ('last_payment_date', models.DateTimeField(blank=True, help_text='The date and time of the last payment to the affiliate.', null=True, verbose_name='last payment date')),
                ('total_commissions_paid', models.DecimalField(decimal_places=2, default=0, help_text='Total commissions paid to the affiliate.', max_digits=9, validators=[django.core.validators.MinValueValidator(0)], verbose_name='total commissions paid')),
                ('total_coin_commissions_paid', models.DecimalField(decimal_places=8, default=0, help_text='Total coin commissions paid to the affiliate.', max_digits=20, verbose_name='total coin commissions paid')),
                ('pending_commissions', models.DecimalField(decimal_places=2, default=0, help_text='Pending commissions to be paid to the affiliate.', max_digits=9, verbose_name='pending commissions')),
                ('pending_coin_commissions', models.DecimalField(decimal_places=8, default=0, help_text='Pending coin commissions to be paid to the affiliate.', max_digits=20, verbose_name='pending coin commissions')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='CoinPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the coin plan.', max_length=100, verbose_name='name')),
                ('amount', models.DecimalField(decimal_places=2, help_text='The amount in dollars for the plan.', max_digits=9, verbose_name='amount')),
                ('interval_count', models.IntegerField(help_text='The number of months the plan should last.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='interval count')),
                ('description', models.TextField(help_text='Description of the plan (up to 300 characters).', max_length=300, verbose_name='description')),
                ('status', models.CharField(choices=[('A', 'Active'), ('I', 'Inactive')], default='A', help_text='Status of the plan.', max_length=1, verbose_name='status')),
                ('subscriber_count', models.IntegerField(default=0, help_text='Number of subscriptions to this plan.', verbose_name='subscriber count')),
                ('discord_role_id', models.CharField(help_text='The ID of the Discord role assigned to subscribers.', max_length=255, verbose_name='discord role id')),
                ('permission_description', models.CharField(blank=True, help_text='The description of permissions given to subscribers.', max_length=255, verbose_name='permission description')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'coin plan',
                'verbose_name_plural': 'coin plans',
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='ServerOwner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('discord_id', models.CharField(help_text='Discord ID of the Serverowner.', max_length=255, unique=True, verbose_name='discord id')),
                ('username', models.CharField(help_text='The username of the Serverowner from Discord.', max_length=255, unique=True, verbose_name='username')),
                ('avatar', models.CharField(blank=True, help_text="The ID of the Serverowner's avatar from Discord.", max_length=255, verbose_name='avatar')),
                ('subdomain', models.CharField(help_text='The referral name.', max_length=20, verbose_name='subdomain')),
                ('email', models.EmailField(help_text='Email address of the Serverowner from Discord.', max_length=254, verbose_name='email')),
                ('stripe_account_id', models.CharField(blank=True, help_text='The stripe account ID of the Serverowner.', max_length=100, verbose_name='stripe account id')),
                ('affiliate_commission', models.IntegerField(blank=True, help_text='Percentage commission for affiliates.', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name='affiliate commission')),
                ('total_pending_commissions', models.DecimalField(decimal_places=2, default=0, help_text='Total pending dollar commissions to be paid by the Serverowner.', max_digits=9, validators=[django.core.validators.MinValueValidator(0)], verbose_name='total pending commissions')),
                ('total_coin_pending_commissions', models.DecimalField(decimal_places=8, default=0, help_text='Total pending coin commissions to be paid by the Serverowner.', max_digits=20, verbose_name='total coin pending commissions')),
                ('coinpayment_api_secret_key', models.CharField(blank=True, help_text='Coinpayment API secret key of the serverowner.', max_length=255, verbose_name='coinpayment api secret key')),
                ('coinpayment_api_public_key', models.CharField(blank=True, help_text='Coinpayment API public key of the serverowner.', max_length=255, verbose_name='coinpayment api public key')),
                ('coinpayment_onboarding', models.BooleanField(default=False, help_text='If this Serverowner onboarded via coinpayment.', verbose_name='coinpayment onboarding')),
                ('stripe_onboarding', models.BooleanField(default=False, help_text='If this Serverowner onboarded via stripe.', verbose_name='stripe onboarding')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(help_text='The Serverowner.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'serverowner',
                'verbose_name_plural': 'serverowners',
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='StripePlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_id', models.CharField(help_text='The product ID associated with the plan.', max_length=100, verbose_name='product id')),
                ('price_id', models.CharField(help_text='The price ID associated with the plan.', max_length=100, verbose_name='price id')),
                ('name', models.CharField(help_text='The name of the Stripe plan.', max_length=100, verbose_name='name')),
                ('amount', models.DecimalField(decimal_places=2, help_text='The amount in dollars for the plan.', max_digits=9, verbose_name='amount')),
                ('description', models.TextField(help_text='Description of the plan (up to 300 characters).', max_length=300, verbose_name='description')),
                ('currency', models.CharField(default='usd', help_text='The currency code used for the plan.', max_length=3, verbose_name='currency')),
                ('interval_count', models.IntegerField(help_text='Number of months the plan should last.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='interval count')),
                ('subscriber_count', models.IntegerField(default=0, help_text='The number of subscribers to this plan.', verbose_name='subscriber count')),
                ('status', models.CharField(choices=[('A', 'Active'), ('I', 'Inactive')], default='A', help_text='Status of the plan.', max_length=1, verbose_name='status')),
                ('discord_role_id', models.CharField(help_text='ID of Discord role to be assigned to subscribers.', max_length=255, verbose_name='discord role id')),
                ('permission_description', models.CharField(blank=True, help_text='Description of permissions to be given to subscribers.', max_length=255, verbose_name='permission description')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(help_text='The server owner who created the plan.', on_delete=django.db.models.deletion.CASCADE, related_name='plans', to='accounts.serverowner', verbose_name='user')),
            ],
            options={
                'verbose_name': 'stripe plan',
                'verbose_name_plural': 'stripe plans',
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='Subscriber',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('discord_id', models.CharField(help_text='Discord ID of the subscriber.', max_length=255, unique=True, verbose_name='discord id')),
                ('username', models.CharField(help_text='Username of the subscriber.', max_length=255, unique=True, verbose_name='username')),
                ('avatar', models.CharField(blank=True, help_text='Avatar URL of the subscriber.', max_length=255, verbose_name='avatar')),
                ('email', models.EmailField(help_text='Email address of the subscriber.', max_length=254, verbose_name='email')),
                ('stripe_customer_id', models.CharField(blank=True, help_text='Stripe customer ID of the subscriber.', max_length=255, verbose_name='stripe customer id')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('subscribed_via', models.ForeignKey(blank=True, help_text='The serverowner via which the subscriber is subscribed.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.serverowner', verbose_name='subscribed via')),
                ('user', models.OneToOneField(help_text='The associated user for the subscriber.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'subscriber',
                'verbose_name_plural': 'subscribers',
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subscription_date', models.DateTimeField(blank=True, help_text='The date and time when the subscription was initiated.', null=True, verbose_name='subscription date')),
                ('expiration_date', models.DateTimeField(blank=True, help_text='The date and time when the subscription will expire.', null=True, verbose_name='expiration date')),
                ('subscription_id', models.CharField(blank=True, help_text='The Stripe subscription ID associated with this subscription.', max_length=200, verbose_name='subscription id')),
                ('session_id', models.CharField(blank=True, help_text='The Stripe checkout session ID associated with this subscription.', max_length=200, verbose_name='session id')),
                ('status', models.CharField(choices=[('A', 'Active'), ('I', 'Inactive'), ('E', 'Expired'), ('C', 'Canceled')], default='I', help_text='The status of the subscription.', max_length=1, verbose_name='status')),
                ('value', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='value')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('plan', models.ForeignKey(help_text='The Stripe plan being subscribed to.', on_delete=django.db.models.deletion.CASCADE, to='accounts.stripeplan', verbose_name='plan')),
                ('subscribed_via', models.ForeignKey(help_text='The serverowner for whom this subscription is intended.', on_delete=django.db.models.deletion.CASCADE, to='accounts.serverowner', verbose_name='subscribed via')),
                ('subscriber', models.ForeignKey(help_text='The user subscribing to the plan.', on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to='accounts.subscriber', verbose_name='subscriber')),
            ],
            options={
                'verbose_name': 'stripe subscription',
                'verbose_name_plural': 'stripe subscriptions',
                'ordering': ['-created'],
                'get_latest_by': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='Server',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('server_id', models.CharField(help_text='The Discord ID of the server.', max_length=100, verbose_name='server id')),
                ('name', models.CharField(help_text='Name of the server.', max_length=100, verbose_name='name')),
                ('icon', models.CharField(blank=True, help_text='Icon of the server on Discord.', max_length=255, verbose_name='icon')),
                ('choice_server', models.BooleanField(default=False, help_text='If this is the server the Serverowner onboarded with.', verbose_name='choice server')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('owner', models.ForeignKey(help_text='The Serverowner who owns this Discord server.', on_delete=django.db.models.deletion.CASCADE, related_name='servers', to='accounts.serverowner', verbose_name='owner')),
            ],
            options={
                'verbose_name': 'discord server',
                'verbose_name_plural': 'discord servers',
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='PaymentDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('litecoin_address', models.CharField(blank=True, help_text='The Litecoin address of the affiliate, used when registered via CoinPayments.', max_length=255, verbose_name='litecoin address')),
                ('body', models.TextField(blank=True, help_text='Payment details of the affiliate when registered via Stripe.', verbose_name='payment information')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('affiliate', models.OneToOneField(help_text='The affiliate user linked to this payment detail.', on_delete=django.db.models.deletion.CASCADE, to='accounts.affiliate', verbose_name='affiliate')),
            ],
            options={
                'verbose_name': 'payment detail',
            },
        ),
        migrations.CreateModel(
            name='CoinSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subscription_date', models.DateTimeField(blank=True, help_text='The date and time when the subscription was initiated.', null=True, verbose_name='subscription date')),
                ('expiration_date', models.DateTimeField(blank=True, help_text='The date and time when the subscription will expire.', null=True, verbose_name='expiration date')),
                ('status', models.CharField(choices=[('A', 'Active'), ('P', 'Pending'), ('E', 'Expired'), ('C', 'Canceled')], default='P', help_text='The status of the subscription.', max_length=1, verbose_name='status')),
                ('coin_amount', models.DecimalField(blank=True, decimal_places=8, help_text='The litecoin value associated with the subscription.', max_digits=20, null=True, verbose_name='coin amount')),
                ('subscription_id', models.CharField(blank=True, help_text='The Coinpayments Transaction ID.', max_length=225, verbose_name='subscription id')),
                ('address', models.CharField(blank=True, help_text='The Litecoin address associated with the subscription.', max_length=225, verbose_name='address')),
                ('checkout_url', models.CharField(blank=True, help_text='The CoinPayment URL for subscriber redirection.', max_length=225, verbose_name='checkout url')),
                ('status_url', models.CharField(blank=True, help_text='The URL for accessing transaction status information.', max_length=225, verbose_name='status url')),
                ('value', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='value')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('plan', models.ForeignKey(help_text='The coin plan being subscribed to.', on_delete=django.db.models.deletion.CASCADE, to='accounts.coinplan', verbose_name='plan')),
                ('subscribed_via', models.ForeignKey(help_text='The server owner for whom this subscription is intended.', on_delete=django.db.models.deletion.CASCADE, to='accounts.serverowner', verbose_name='subscribed via')),
                ('subscriber', models.ForeignKey(help_text='The user subscribing to the coin plan.', on_delete=django.db.models.deletion.CASCADE, related_name='coin_subscriptions', to='accounts.subscriber', verbose_name='subscriber')),
            ],
            options={
                'verbose_name': 'coin subscription',
                'verbose_name_plural': 'coin subscriptions',
                'ordering': ['-created'],
                'get_latest_by': ['-created'],
            },
        ),
        migrations.AddField(
            model_name='coinplan',
            name='serverowner',
            field=models.ForeignKey(help_text='The serverowner who created the plan.', on_delete=django.db.models.deletion.CASCADE, related_name='coin_plans', to='accounts.serverowner', verbose_name='serverowner'),
        ),
        migrations.CreateModel(
            name='AffiliatePayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(blank=True, decimal_places=2, help_text='The dollar commission to be paid.', max_digits=9, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='amount')),
                ('coin_amount', models.DecimalField(blank=True, decimal_places=8, help_text='The coin commission to be paid.', max_digits=20, null=True, verbose_name='coin amount')),
                ('paid', models.BooleanField(default=False, help_text='If this payment has been made.', verbose_name='paid')),
                ('date_payment_confirmed', models.DateTimeField(blank=True, help_text='Date the serverowner made payment.', null=True, verbose_name='date payment confirmed')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('affiliate', models.ForeignKey(help_text='Discord ID of the Affiliate to be paid.', on_delete=django.db.models.deletion.CASCADE, to='accounts.affiliate', verbose_name='affiliate')),
                ('serverowner', models.ForeignKey(help_text='The serverowner who is to pay the affiliate.', on_delete=django.db.models.deletion.CASCADE, to='accounts.serverowner', verbose_name='serverowner')),
                ('subscriber', models.ForeignKey(help_text='The Affiliate Invitee who subscribed.', on_delete=django.db.models.deletion.CASCADE, to='accounts.subscriber', verbose_name='subscriber')),
            ],
            options={
                'verbose_name': 'affiliate payment',
                'verbose_name_plural': 'affiliate payments',
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='AffiliateInvitee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invitee_discord_id', models.CharField(help_text='Discord ID of the Invitee.', max_length=255, unique=True, verbose_name='invitee discord id')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('affiliate', models.ForeignKey(help_text='The affiliate who invited the user.', on_delete=django.db.models.deletion.CASCADE, to='accounts.affiliate', verbose_name='affiliate')),
            ],
            options={
                'verbose_name': 'affiliate invitee',
                'verbose_name_plural': 'affiliate invitees',
                'ordering': ['-id'],
            },
        ),
        migrations.AddField(
            model_name='affiliate',
            name='serverowner',
            field=models.ForeignKey(help_text='The server owner associated with the affiliate.', on_delete=django.db.models.deletion.CASCADE, to='accounts.serverowner', verbose_name='server owner'),
        ),
        migrations.AddField(
            model_name='affiliate',
            name='subscriber',
            field=models.OneToOneField(help_text='The subscriber associated with the affiliate.', on_delete=django.db.models.deletion.CASCADE, to='accounts.subscriber', verbose_name='subscriber'),
        ),
        migrations.CreateModel(
            name='AccessCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='The unique access code value.', max_length=5, unique=True, verbose_name='code')),
                ('is_used', models.BooleanField(default=False, help_text='Whether the access code has been used.', verbose_name='is used?')),
                ('date_used', models.DateTimeField(blank=True, help_text='The date and time the access code was used.', null=True, verbose_name='date used')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('used_by', models.ForeignKey(blank=True, help_text='The serverowner who used the access code.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.serverowner', verbose_name='used by')),
            ],
            options={
                'verbose_name': 'access code',
                'verbose_name_plural': 'access codes',
                'ordering': ['-created'],
            },
        ),
    ]
